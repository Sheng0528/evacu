import numpy as np
import matplotlib.pyplot as plt
import networkx as nx
import random
from scipy.spatial import ConvexHull
from matplotlib.path import Path
import matplotlib.patches as patches
import pandas as pd
from tabulate import tabulate
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import matplotlib.gridspec as gridspec

# 设置随机种子以保证结果的可重现性
np.random.seed(42)
random.seed(42)

# 创建5x5的网格，总共25个节点
rows, cols = 5, 5
n_nodes = rows * cols

# 创建网络图
G = nx.Graph()

# 首先添加节点和基本网格位置（这是初始位置）
initial_positions = {}
for i in range(rows):
    for j in range(cols):
        node_id = i * cols + j
        # 设置初始位置
        x = j
        y = 4 - i  # 反转Y轴使得原点在左下角
        G.add_node(node_id)
        initial_positions[node_id] = (x, y)

# 添加边（只连接相邻节点）
edges = []

# 水平连接
for i in range(rows):
    for j in range(cols - 1):
        node1 = i * cols + j
        node2 = i * cols + (j + 1)
        # 生成100到300之间的权值
        weight = int(100 + 200 * random.random())
        edges.append((node1, node2, weight))

# 垂直连接
for i in range(rows - 1):
    for j in range(cols):
        node1 = i * cols + j
        node2 = (i + 1) * cols + j
        weight = int(100 + 200 * random.random())
        edges.append((node1, node2, weight))

# 确定干路和支路
main_roads = []
secondary_roads = []

# 指定的内部干路路径
internal_main_roads = [
    (10, 11), (11, 12),  # 路径1: 10-11-12
    (2, 7), (7, 12),  # 路径2: 2-7-12
    (12, 13), (13, 14),  # 路径3: 12-13-14
    (12, 17), (17, 22)  # 路径4: 12-17-22
]

# 将边界也作为干路
edge_nodes = set()
# 顶部和底部边缘节点
for j in range(cols):
    edge_nodes.add(j)  # 顶部
    edge_nodes.add((rows - 1) * cols + j)  # 底部

# 左侧和右侧边缘节点
for i in range(rows):
    edge_nodes.add(i * cols)  # 左侧
    edge_nodes.add(i * cols + (cols - 1))  # 右侧

# 分类干路和支路
for u, v, w in edges:
    # 如果是内部干路
    if (u, v) in internal_main_roads or (v, u) in internal_main_roads:
        main_roads.append((u, v, w))
    # 如果是边界干路
    elif u in edge_nodes and v in edge_nodes and ((abs(u - v) == 1) or (abs(u - v) == cols)):
        main_roads.append((u, v, w))
    # 否则是支路
    else:
        secondary_roads.append((u, v, w))

# 添加所有边到图中
for u, v, w in main_roads + secondary_roads:
    G.add_edge(u, v, weight=w)

# 创建干路集合，用于后续计算穿越干路次数
main_road_set = set()
for u, v, _ in main_roads:
    main_road_set.add((min(u, v), max(u, v)))

# 现在开始优化节点位置，使道路长度与权值成正比
# 规范化权重，使其在[0.5, 2]范围内
all_weights = [w for _, _, w in main_roads + secondary_roads]
min_weight = min(all_weights)
max_weight = max(all_weights)
weight_range = max_weight - min_weight

# 创建权重到长度的映射
weight_to_length = {}
for u, v, w in main_roads + secondary_roads:
    # 标准化权重到[0.5, 2]范围，权重越大，道路越长
    if weight_range > 0:
        normalized_weight = 0.5 + 1.5 * (w - min_weight) / weight_range
    else:
        normalized_weight = 1.0
    weight_to_length[(min(u, v), max(u, v))] = normalized_weight

# 使用力导向算法来优化节点位置
def force_directed_layout(positions, iterations=100):
    """使用简化的力导向算法来优化节点位置"""
    new_positions = positions.copy()

    for _ in range(iterations):
        # 计算边的力
        forces = {node: [0, 0] for node in G.nodes()}

        for u, v, w in main_roads + secondary_roads:
            u, v = min(u, v), max(u, v)
            x1, y1 = new_positions[u]
            x2, y2 = new_positions[v]

            # 计算当前距离
            dx = x2 - x1
            dy = y2 - y1
            distance = np.sqrt(dx ** 2 + dy ** 2)

            if distance == 0:
                continue  # 避免除以零

            # 目标距离 - 根据权重调整
            target_distance = weight_to_length[(u, v)]

            # 计算力的方向和大小
            force = (target_distance - distance) * 0.1
            fx = force * dx / distance
            fy = force * dy / distance

            # 应用力
            forces[u][0] -= fx
            forces[u][1] -= fy
            forces[v][0] += fx
            forces[v][1] += fy

        # 应用网格约束力 - 拉回到原始网格位置
        for node in G.nodes():
            orig_x, orig_y = initial_positions[node]
            curr_x, curr_y = new_positions[node]

            # 网格约束力 - 越远离原始位置，力越大
            grid_force = 0.05
            forces[node][0] += (orig_x - curr_x) * grid_force
            forces[node][1] += (orig_y - curr_y) * grid_force

        # 更新位置
        for node in G.nodes():
            new_positions[node] = (
                new_positions[node][0] + forces[node][0],
                new_positions[node][1] + forces[node][1]
            )

    return new_positions

# 执行力导向布局优化
optimized_positions = force_directed_layout(initial_positions, iterations=200)

# 对边界节点进行修正，确保它们仍在矩形边界上
for node in G.nodes():
    x, y = optimized_positions[node]
    i, j = node // cols, node % cols

    # 强制边界节点在边界上
    if i == 0:  # 顶部边界
        optimized_positions[node] = (x, rows - 1)
    elif i == rows - 1:  # 底部边界
        optimized_positions[node] = (x, 0)
    elif j == 0:  # 左侧边界
        optimized_positions[node] = (0, y)
    elif j == cols - 1:  # 右侧边界
        optimized_positions[node] = (cols - 1, y)

# 创建一个包含所有边的字典，方便查找
edge_dict = {}
for u, v, w in main_roads + secondary_roads:
    if u not in edge_dict:
        edge_dict[u] = []
    if v not in edge_dict:
        edge_dict[v] = []
    edge_dict[u].append(v)
    edge_dict[v].append(u)

# 用干路定义小区，明确指定每个小区的边界节点
district_boundaries = [
    # 左上小区 (由干路 2-7-12-11-10 和边界围成)
    [0, 1, 2, 7, 12, 11, 10, 5, 0],
    # 右上小区 (由干路 10-11-12 和边界围成)
    [2, 3, 4, 9, 14, 13, 12, 7, 2],
    # 左下小区 (由干路 10-11-12-17-22 和边界围成)
    [10, 15, 20, 21, 22, 17, 12, 11, 10],
    # 右下小区 (由干路 12-13-14 和 12-17-22 和边界围成)
    [12, 13, 14, 19, 24, 23, 22, 17, 12]
]

# 为每个小区的需求点Q手动赋值，为该点的需求量
district_demands = [350, 320, 460, 500]

# 计算多边形的重心，即需求点
def polygon_centroid(vertices):
    """计算多边形的几何中心（重心）

    Args:
        vertices: 多边形顶点坐标的列表 [(x1,y1), (x2,y2), ...]

    Returns:
        (cx, cy): 几何中心坐标
    """
    n = len(vertices)
    if n < 3:
        return sum([v[0] for v in vertices]) / n, sum([v[1] for v in vertices]) / n

    # 初始化面积和中心坐标
    A = 0
    cx = 0
    cy = 0

    # 遍历所有顶点对，计算面积和中心坐标的加权和
    for i in range(n):
        x0, y0 = vertices[i]
        x1, y1 = vertices[(i + 1) % n]

        # 计算三角形的面积的两倍
        cross = (x0 * y1) - (x1 * y0)
        A += cross

        # 累加中心坐标的加权和
        cx += (x0 + x1) * cross
        cy += (y0 + y1) * cross

    # 完成面积计算 (需要除以2)
    A = A / 2.0

    # 防止除以零
    if abs(A) < 1e-10:
        # 如果面积几乎为零，使用顶点的简单平均值
        return sum([v[0] for v in vertices]) / n, sum([v[1] for v in vertices]) / n

    # 计算重心 (需要除以6A)
    cx = cx / (6.0 * A)
    cy = cy / (6.0 * A)

    return cx, cy


# 检查点是否在多边形内部
def point_in_polygon(point, polygon):
    """检查点是否在多边形内部

    Args:
        point: 点的坐标 (x, y)
        polygon: 多边形顶点坐标的列表 [(x1,y1), (x2,y2), ...]

    Returns:
        bool: 如果点在多边形内部，则为True
    """
    path = Path(polygon)
    return path.contains_point(point)

# 计算每个小区的几何重心
district_centroids = []
district_polygon_coords = []  # 存储每个小区的多边形坐标

for district_boundary in district_boundaries:
    # 提取边界节点的坐标
    boundary_points = [optimized_positions[node] for node in district_boundary]
    district_polygon_coords.append(boundary_points)

    # 计算几何重心
    centroid = polygon_centroid(boundary_points)
    district_centroids.append(centroid)

# 设置特殊节点 - 修改为新的关键交叉点[1, 5, 8, 16, 18]
special_nodes = [1, 5, 8, 16, 18]  # 关键交叉点

# 手动输入每个特殊节点对应的P点坐标
# 格式: {特殊节点: (x, y)}
manual_p_points = {
    1: (1.6, 3.6),  # 特殊节点1对应的备选集合点坐标
    5: (0.3, 3.1),  # 特殊节点5对应的备选集合点坐标
    8: (3.3, 3.3),  # 特殊节点8对应的备选集合点坐标
    16: (0.5, 1.4),  # 特殊节点16对应的备选集合点坐标
    18: (3.4, 1.0)  # 特殊节点18对应的备选集合点坐标
}

# 为每个集合点p手动赋值，为该点的容量
# 五个集合点的容量分别为610，550，800，870，900
p_point_capacities = {
    1: 610,
    5: 550,
    8: 800,
    16: 870,
    18: 900
}

# 为每个备选集合点p确定它属于哪个小区
p_points = []
node_district_map = {}  # 特殊节点对应的小区

# 确定每个特殊节点属于哪个小区
for node in special_nodes:
    node_pos = optimized_positions[node]

    # 检查节点在哪个小区内
    for i, polygon in enumerate(district_polygon_coords):
        if point_in_polygon(node_pos, polygon):
            node_district_map[node] = i
            break

    # 如果节点不在任何小区内（例如在边界上），选择最近的小区
    if node not in node_district_map:
        min_dist = float('inf')
        closest_district = -1

        for i, centroid in enumerate(district_centroids):
            dist = np.sqrt((centroid[0] - node_pos[0]) ** 2 + (centroid[1] - node_pos[1]) ** 2)
            if dist < min_dist:
                min_dist = dist
                closest_district = i

        if closest_district != -1:
            node_district_map[node] = closest_district

# 创建集合点p列表，并确定每个集合点p所属的小区
for node, p_pos in manual_p_points.items():
    # 检查该集合点p属于哪个小区
    district_idx = None

    # 如果特殊节点有对应的小区，使用该小区
    if node in node_district_map:
        district_idx = node_district_map[node]
    else:
        # 否则，检查p在哪个小区内
        for i, polygon in enumerate(district_polygon_coords):
            if point_in_polygon(p_pos, polygon):
                district_idx = i
                break

        # 如果备选集合点p不在任何小区内，选择最近的小区
        if district_idx is None:
            min_dist = float('inf')

            for i, centroid in enumerate(district_centroids):
                dist = np.sqrt((centroid[0] - p_pos[0]) ** 2 + (centroid[1] - p_pos[1]) ** 2)
                if dist < min_dist:
                    min_dist = dist
                    district_idx = i

    if district_idx is not None:
        p_points.append((node, district_idx, p_pos))

# 创建一个字典，按小区索引存储备选集合点
district_p_points = {}
for node, district_idx, p_pos in p_points:
    if district_idx not in district_p_points:
        district_p_points[district_idx] = []
    district_p_points[district_idx].append((node, p_pos))

# 计算两点之间的距离
def distance(point1, point2):
    return np.sqrt((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2)

# 计算点到线段的距离
def point_to_segment_distance(point, segment_start, segment_end):
    """计算点到线段的距离"""
    # 线段参数
    x1, y1 = segment_start
    x2, y2 = segment_end
    x0, y0 = point

    # 如果线段退化为点
    if x1 == x2 and y1 == y2:
        return distance(point, segment_start)

    # 计算投影点的参数t
    t = ((x0 - x1) * (x2 - x1) + (y0 - y1) * (y2 - y1)) / ((x2 - x1) ** 2 + (y2 - y1) ** 2)

    # 如果投影点在线段外部，返回到端点的距离
    if t < 0:
        return distance(point, segment_start)
    elif t > 1:
        return distance(point, segment_end)

    # 计算投影点坐标
    projection_x = x1 + t * (x2 - x1)
    projection_y = y1 + t * (y2 - y1)

    # 返回点到投影点的距离
    return distance(point, (projection_x, projection_y))

# 找出相邻小区并确定它们之间的共同干路
adjacent_districts_with_shared_border = []
district_borders = {}  # 存储小区之间的共同干路

# 创建一个集合来存储已经分享了干路的小区对
shared_border_districts = set()

# 检查每条干路是否连接不同小区
for u, v, w in main_roads:
    # 每条干路的节点可能属于多个小区（尤其是边界节点）
    districts_u = []
    districts_v = []

    for i, boundary in enumerate(district_boundaries):
        if u in boundary:
            districts_u.append(i)
        if v in boundary:
            districts_v.append(i)

    # 找出这两个节点连接的不同小区对
    for d_u in districts_u:
        for d_v in districts_v:
            if d_u != d_v:
                # 确保只考虑真正共享边界的小区对
                district_pair = tuple(sorted([d_u, d_v]))
                if district_pair not in shared_border_districts:
                    # 检查这两个小区是否真的共享边界
                    common_nodes = set(district_boundaries[d_u]) & set(district_boundaries[d_v])
                    if len(common_nodes) >= 2:  # 至少需要两个共同节点才能形成边界
                        adjacent_districts_with_shared_border.append((d_u, d_v))
                        shared_border_districts.add(district_pair)

                        # 存储小区之间的共同干路
                        if district_pair not in district_borders:
                            district_borders[district_pair] = []
                        district_borders[district_pair].append((u, v))

# 根据相邻小区之间的点的距离，而不是到边界的距离，找出每对相邻小区之间距离最近的点对
cross_district_connections = []

for district_pair in shared_border_districts:
    d1, d2 = district_pair

    # 获取小区1的形心和备选点
    points_d1 = [('centroid', district_centroids[d1])]
    if d1 in district_p_points:
        for node, pos in district_p_points[d1]:
            points_d1.append(('p_point', pos))

    # 获取小区2的形心和备选点
    points_d2 = [('centroid', district_centroids[d2])]
    if d2 in district_p_points:
        for node, pos in district_p_points[d2]:
            points_d2.append(('p_point', pos))

    # 寻找两个小区之间距离最近的点对
    min_dist = float('inf')
    closest_points = None

    for type1, pos1 in points_d1:
        for type2, pos2 in points_d2:
            dist = distance(pos1, pos2)
            if dist < min_dist:
                min_dist = dist
                closest_points = (type1, pos1, type2, pos2)

    # 添加最近的点对作为连接
    if closest_points:
        cross_district_connections.append(closest_points)

# ================ 添加迪杰斯特拉算法计算最短步行距离和穿越干路次数 ================
# 找到离每个需求点(Q)和集合点(P)最近的网络节点
def find_closest_node(point_pos, positions):
    """找到离给定点最近的网络节点"""
    min_dist = float('inf')
    closest_node = None

    for node, pos in positions.items():
        dist = distance(point_pos, pos)
        if dist < min_dist:
            min_dist = dist
            closest_node = node

    return closest_node

# 找出每个需求点Q对应的最近网络节点
q_closest_nodes = []
for i, centroid in enumerate(district_centroids):
    closest_node = find_closest_node(centroid, optimized_positions)
    q_closest_nodes.append((i, closest_node, centroid))

# 找出每个集合点P对应的最近网络节点
p_closest_nodes = []
for node, district_idx, p_pos in p_points:
    closest_node = find_closest_node(p_pos, optimized_positions)
    p_closest_nodes.append((node, closest_node, p_pos))

# 计算两个节点之间的最短路径，并统计穿越干路次数
def calc_shortest_path_and_main_road_crossings(graph, start, end, main_road_set):
    """计算最短路径和穿越干路次数"""
    # 使用迪杰斯特拉算法计算最短路径
    try:
        shortest_path = nx.dijkstra_path(graph, start, end, weight='weight')
        shortest_path_length = nx.dijkstra_path_length(graph, start, end, weight='weight')

        # 计算穿越干路次数
        main_road_crossings = 0
        for i in range(len(shortest_path) - 1):
            u, v = shortest_path[i], shortest_path[i + 1]
            if (min(u, v), max(u, v)) in main_road_set:
                main_road_crossings += 1

        return shortest_path, shortest_path_length, main_road_crossings
    except nx.NetworkXNoPath:
        return None, float('inf'), 0

# 计算所有Q点到所有P点的最短路径和穿越干路次数
results = []

# 创建表格数据
table_data = []
table_headers = ["Demand Point", "Assembly Point", "Shortest Distance", "Number of Main Road Crossings", "Shortest Path"]

for q_idx, q_node, q_pos in q_closest_nodes:
    for p_idx, p_node, p_pos in p_closest_nodes:
        path, length, crossings = calc_shortest_path_and_main_road_crossings(G, q_node, p_node, main_road_set)
        if path:
            # 存储结果
            results.append({
                'q_idx': q_idx,
                'p_idx': p_idx,
                'q_node': q_node,
                'p_node': p_node,
                'path': path,
                'length': length,
                'crossings': crossings
            })

            # 添加到表格数据
            table_data.append([
                f"Q{q_idx + 1}",
                f"P{p_idx}",
                round(length, 2),
                crossings,
                " -> ".join(map(str, path))
            ])

# 创建DataFrame并排序
df = pd.DataFrame(table_data, columns=table_headers)
df = df.sort_values(by=["Demand Point", "Shortest Path"])

def create_table_figure(dataframe):
    """创建表格的matplotlib图形对象，支持合并相同Q点单元格"""
    # 获取唯一的需求点和每个需求点的行数
    demand_points = dataframe['Demand Point'].unique()
    demand_point_counts = dataframe['Demand Point'].value_counts().to_dict()

    # 创建一个足够大的图形
    fig = plt.figure(figsize=(14, 8))
    ax = fig.add_subplot(111)

    # 隐藏坐标轴
    ax.axis('off')
    ax.axis('tight')

    # 准备表格数据
    table_data = []
    row_colors = []

    # 为每个需求点添加数据行
    for dp in demand_points:
        dp_rows = dataframe[dataframe['Demand Point'] == dp].values.tolist()
        first = True
        for row in dp_rows:
            if first:
                table_data.append(row)
                row_colors.append(['lightgray'] + ['white'] * (len(row) - 1))
                first = False
            else:
                # 第一列设为空字符串，其余保持不变
                modified_row = [''] + row[1:]
                table_data.append(modified_row)
                row_colors.append(['lightgray'] + ['white'] * (len(modified_row) - 1))

    # 创建表格
    table = ax.table(
        cellText=table_data,
        colLabels=dataframe.columns,
        loc='center',
        cellLoc='center',
        colColours=['lightblue'] * len(dataframe.columns),
        cellColours=row_colors
    )

    # 设置表格样式
    table.auto_set_font_size(False)
    table.set_fontsize(10)
    table.scale(1.2, 1.5)

    # 对每个需求点进行单元格合并处理
    row_idx = 1  # 从1开始，因为0是表头
    for dp in demand_points:
        count = demand_point_counts[dp]

        if count > 1:
            # 查找第一个单元格的纵坐标和高度
            cell_height = table[(row_idx, 0)].get_height()

            # 隐藏其他行的第一个单元格
            for i in range(1, count):
                table[(row_idx + i, 0)].set_visible(False)

            # 第一个单元格的文本垂直居中
            table[(row_idx, 0)]._text.set_verticalalignment('center')

        row_idx += count

    # 设置标题
    ax.set_title('Shortest Walking Distance and Main Road Crossings Table', fontsize=16, pad=20)

    # 调整布局
    plt.tight_layout()

    return fig

# 创建网络图和表格的双窗口布局
fig_network = plt.figure(figsize=(12, 10))

# 创建小区颜色填充
colors = ['aqua', 'olive', 'yellow', 'violet']

# 填充小区区域
for i, district_boundary in enumerate(district_boundaries):
    # 创建边界多边形
    boundary_points = [optimized_positions[node] for node in district_boundary]

    # 使用多边形路径填充区域
    polygon_patch = patches.Polygon(boundary_points, closed=True,
                                    facecolor=colors[i], edgecolor='none', alpha=0.3)
    plt.gca().add_patch(polygon_patch)

# 绘制支路（细实线）
for u, v, w in secondary_roads:
    x1, y1 = optimized_positions[u]
    x2, y2 = optimized_positions[v]
    plt.plot([x1, x2], [y1, y2], 'k-', linewidth=1.0,
             label='Secondary road' if u == secondary_roads[0][0] and v == secondary_roads[0][1] else "")
    # 添加权重标签
    mid_x = (x1 + x2) / 2
    mid_y = (y1 + y2) / 2
    plt.text(mid_x, mid_y, str(w), fontsize=8)

# 绘制干路（粗实线）
for u, v, w in main_roads:
    x1, y1 = optimized_positions[u]
    x2, y2 = optimized_positions[v]
    plt.plot([x1, x2], [y1, y2], 'k-', linewidth=2.5,
             label='Primary road' if u == main_roads[0][0] and v == main_roads[0][1] else "")
    # 添加权重标签
    mid_x = (x1 + x2) / 2
    mid_y = (y1 + y2) / 2
    plt.text(mid_x, mid_y, str(w), fontsize=8)

# 绘制节点（空心圆）
for node in G.nodes():
    x, y = optimized_positions[node]
    if node in special_nodes:  # 将特定节点标记为灰色
        plt.plot(x, y, 'o', markersize=10, markerfacecolor='gray',
                 markeredgecolor='black', markeredgewidth=1.5)
    else:
        plt.plot(x, y, 'o', markersize=10, markerfacecolor='white',
                 markeredgecolor='black', markeredgewidth=1.5)
    plt.text(x - 0.05, y - 0.15, str(node), fontsize=10)

# 绘制需求点（实心三角形）并添加需求量标签
for i, centroid in enumerate(district_centroids):
    plt.plot(centroid[0], centroid[1], '^', markersize=10,
             markerfacecolor='black', markeredgecolor='black')
    # 添加需求点标签和需求量
    plt.text(centroid[0] + 0.1, centroid[1], f'Q{i + 1}:{district_demands[i]}', fontsize=10)

# 绘制备选集合点p（灰色方形）和连接，并添加容量标签
for node, district_idx, p_pos in p_points:
    plt.plot(p_pos[0], p_pos[1], 's', markersize=8,
             markerfacecolor='gray', markeredgecolor='black')
    # 添加集合点标签和容量
    plt.text(p_pos[0] + 0.05, p_pos[1], f'P{node}:{p_point_capacities[node]}', fontsize=8)

    # 用虚线连接形心与p（权值为0）
    centroid = district_centroids[district_idx]
    plt.plot([centroid[0], p_pos[0]], [centroid[1], p_pos[1]],
             'k--', linewidth=1.0)

    # 在虚线中点添加权值0标签
    mid_x = (centroid[0] + p_pos[0]) / 2
    mid_y = (centroid[1] + p_pos[1]) / 2
    plt.text(mid_x, mid_y, '0', fontsize=8)

# 连接相邻小区间最近的点（实线，权值为1）
for conn in cross_district_connections:
    type1, pos1, type2, pos2 = conn

    # 用实线连接最近点（权值为1）
    plt.plot([pos1[0], pos2[0]], [pos1[1], pos2[1]],
             'k-', linewidth=1.5)

    # 在实线中点添加权值1标签
    mid_x = (pos1[0] + pos2[0]) / 2
    mid_y = (pos1[1] + pos2[1]) / 2
    plt.text(mid_x, mid_y, '1', fontsize=8)

# 添加图例和标题
handles, labels = plt.gca().get_legend_handles_labels()
district_patches = [patches.Patch(color=colors[i], alpha=0.3, label=f'Division {i + 1}') for i in range(4)]

# 添加形心和集合点P的图例
centroid_marker = plt.Line2D([], [], marker='^', color='black', linestyle='None',
                             markersize=10, markerfacecolor='black', label='Centroid (Q)')
ppoint_marker = plt.Line2D([], [], marker='s', color='black', linestyle='None',
                           markersize=8, markerfacecolor='gray', label='Collection Point (P)')

handles.extend(district_patches)
handles.extend([centroid_marker, ppoint_marker])
labels.extend([f'Division {i + 1}' for i in range(4)])
labels.extend(['Evacuation needs(Q)', 'Assemble point (P)'])

# 添加需求点总量和集合点总容量的说明
total_demand = sum(district_demands)
total_capacity = sum(p_point_capacities.values())
plt.figtext(0.5, 0.01, f'Total Demand: {total_demand}   Total Capacity: {total_capacity}',
            ha='center', fontsize=12, bbox=dict(facecolor='white', alpha=0.5))

plt.legend(handles=handles, labels=labels, loc='upper right')

plt.title("Area Division with Evacuation Planning")
plt.grid(True, linestyle='--', alpha=0.4)
plt.xlim(-0.5, cols - 0.5)
plt.ylim(-0.5, rows - 0.5)
plt.tight_layout()

# 创建并显示表格图像
fig_table = create_table_figure(df)

# 显示两个图形
plt.figure(fig_network.number)
plt.figure(fig_table.number)

# 导出到CSV
df.to_csv('evacuation_routes.csv', index=False)

# 只输出基本信息
print("路径图和最短路径表格已创建，详细信息已导出到evacuation_routes.csv")

plt.show()
